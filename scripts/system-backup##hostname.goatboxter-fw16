#!/bin/bash

#####################################################
##
## system-backup
## 
## This script takes a live backup of the layout and filesystems. Set up a systemd
##   service to run it daily and configure the parameters below.
##
## This script is also a README about how to restore. Perform restoration from an
##   Arch Linux installation media. See sections below on commands to restore
##   partition tables, LVM layout, and files (which includes filesystems and block
##   IDs). Afterwards, chroot in and run `mkinitcpio`.
##
#####################################################

BACKUP_ROOT_PATH="/mnt/backup/"
BACKUP_SECONDARY_ROOT_PATH="/mnt/nas-brandon/PcBackup/goatboxter-fw16/"
DAYS_BETWEEN_BACKUPS=6
MAX_BACKUP_AGE_DAYS=13

#####################################################
##
## Check if enough time has elapsed since last backup
##
#####################################################

echo "system-backup on "$(date)

SECONDS_BETWEEN_BACKUPS=$((DAYS_BETWEEN_BACKUPS * 24 * 60 * 60))

if ! /home/brandon/scripts/touch-date-check \
     -f "${BACKUP_ROOT_PATH}backuptime.txt" \
     -s "${SECONDS_BETWEEN_BACKUPS}"
then
    echo "Canceling, as not enough time has elapsed since last backup."
    exit 0
fi

#####################################################
##
## Delete backups older than MAX_BACKUP_AGE_DAYS
##
#####################################################

find "$BACKUP_ROOT_PATH" -maxdepth 1 -type d -name '20*' -mtime "+$MAX_BACKUP_AGE_DAYS" -exec rm -rf {} +

#####################################################
##
## Init backup params and path
##
#####################################################
TIMESTAMP="$(date +%Y%m%d-%Hh%M)"
BACKDIR="${BACKUP_ROOT_PATH}${TIMESTAMP}"
RES=0 # returned by this script to indicate any errors
mkdir ${BACKDIR}

#####################################################
##
## Include the current version of this backup script for documentation
##
#####################################################

cp $(readlink -f "$0") "${BACKDIR}"

#####################################################
##
## Back up partition table(s), LVM metadata, and block (filesystem) UUIDs
##
## --
##
## For restoration, use `sfdisk` to restore the partition tables, `pvcreate` and
##     `vgcfgrestore` to restore LVM, and `fsarchiver` to restore the filesystems.
##
## Note on UUIDs: there are partition UUIDs (PARTUUIDs), LVM UUIDs, and filesystem UUIDs.
##
##   - Partition UUIDs will be important for the EFI NVRAM to find the rEFInd boot
##     partition and for the boot loader to find the swap and LVM partitions. Use
##     gdisk(8) to modify the PARTUUIDs on a new system to match, or `efibootmgr`
##     to do the reverse (update the UUID in the NVRAM entry); in both cases--
##     especially the second--run mkinitcpio and initramfs when restoring the
##     new system.
##   - LVM UUIDs should match, too, which will be referenced by LVM itself and
##     possibly other systems backed up in the root and home volumes. After
##     creating the LVM physical volumes, use something like
##     vgcfgrestore -f /path/to/etc-lvm-backup VOLUME_GROUP_NAME 
##     to get the LVM metadata synced up for free.
##   - Block/filesystem UUIDs will be important for the kernel to automount from
##     the /etc/fstab entry. `fsarchiver` is used to back up filesystems,
##     and its corresponding restoration should bring back the block UUIDs for
##     free. If you need to do it manually, use mlabel(1) to modify them to match
##     /etc/fstab, or do the reverse by updating /etc/fstab to the new UUIDs.
##
## See inline comments on which steps back up each UUID type.
##
#####################################################

# includes PARTUUIDs
sfdisk -d /dev/disk/by-id/nvme-eui.e8238fa6bf530001001b448b474d80be > "${BACKDIR}/sfdisk-partition-table__dev--disk--by-id--nvme-eui.e8238fa6bf530001001b448b474d80be.txt"
sfdisk -d /dev/disk/by-id/nvme-eui.e8238fa6bf530001001b448b4cb006fd > "${BACKDIR}/sfdisk-partition-table__dev--disk--by-id--nvme-eui.e8238fa6bf530001001b448b4cb006fd.txt"
# includes LVM UUIDs
cp /etc/lvm/backup/fw16-vg "${BACKDIR}/etc-lvm-backup-fw16-vg"
cp /etc/lvm/backup/fw16-2-vg "${BACKDIR}/etc-lvm-backup-fw16-2-vg"
# includes filesystem UUIDs
blkid > "${BACKDIR}/blkid.txt"

#####################################################
##
## Back up NVRAM
##
#####################################################

efibootmgr -v > "${BACKDIR}/efibootmgr.txt"

#####################################################
##
## Back up /boot
##
## --
##
## Restore with fsarchiver to the new primary partition
##
#####################################################

echo "backing up /boot: "$(date)

if mountpoint -q /boot; then
    MOUNTED_BOOT=1
    if ! umount /boot
    then
        echo "unable to unmount /boot"
        exit 1
    fi
fi

if ! fsarchiver savefs -Z8 -j8 "${BACKDIR}/boot.fsa" /dev/disk/by-uuid/5F7D-3EB0
then
    echo "fsarchive exited with a fail status on /boot"
    RES=1
fi

if [ "$MOUNTED_BOOT" -eq "1" ]; then
    if ! mount /boot; then
        echo "unable to mount /boot"
        exit 1
    fi
fi

sha256sum "${BACKDIR}/boot.fsa" > "${BACKDIR}/boot.fsa.sha256"

#####################################################
##
## Back up /dev/fw16-vg/arch-root
##
## --
##
## Restore with fsarchiver to the new logical volume
##
#####################################################

echo "backing up arch-root: "$(date)

TRY_SILENT=1 VOLGROP='fw16-vg' SNAPVOL='arch-root-backup-snap' /home/brandon/scripts/snap-lvm-delete

if ! VOLGROP='fw16-vg' ORIGVOL='arch-root' SNAPVOL='arch-root-backup-snap' SNAPSIZ='40G' /home/brandon/scripts/snap-lvm
then
    echo "unable to snap arch-root"
    exit 1
fi

if ! FSAOPTS='-Z8 -j8' VOLGROP='fw16-vg' SNAPVOL='arch-root-backup-snap' BACKDIR="${BACKDIR}" BACKNAM='arch-root' /home/brandon/scripts/snap-lvm-fsarchive
then
    echo "fsarchive exited with a fail status on arch-root"
    RES=1
fi

if ! VOLGROP='fw16-vg' SNAPVOL='arch-root-backup-snap' /home/brandon/scripts/snap-lvm-delete
then
    echo "unable to delete snap arch-root-backup-snap"
    exit 1
fi

sha256sum "${BACKDIR}/arch-root.fsa" > "${BACKDIR}/arch-root.fsa.sha256"

#####################################################
##
## Back up /dev/fw16-vg/arch-home
##
## --
##
## Restore with fsarchiver to the new logical volume
##
#####################################################

echo "backing up arch-home: "$(date)

TRY_SILENT=1 VOLGROP='fw16-vg' SNAPVOL='arch-home-backup-snap' /home/brandon/scripts/snap-lvm-delete

if ! VOLGROP='fw16-vg' ORIGVOL='arch-home' SNAPVOL='arch-home-backup-snap' SNAPSIZ='40G' /home/brandon/scripts/snap-lvm
then
    echo "unable to snap arch-home"
    exit 1
fi

if ! FSAOPTS='-Z8 -j8' VOLGROP='fw16-vg' SNAPVOL='arch-home-backup-snap' BACKDIR="${BACKDIR}" BACKNAM='arch-home' /home/brandon/scripts/snap-lvm-fsarchive
then
    echo "fsarchive exited with a fail status on arch-home"
    RES=1
fi

if ! VOLGROP='fw16-vg' SNAPVOL='arch-home-backup-snap' /home/brandon/scripts/snap-lvm-delete
then
    echo "unable to delete snap arch-root-home-snap"
    exit 1
fi

sha256sum "${BACKDIR}/arch-home.fsa" > "${BACKDIR}/arch-home.fsa.sha256"

#####################################################
##
## Back up /dev/fw16-vg/arch-vm2
##
## --
##
## Restore with fsarchiver to the new logical volume
##
#####################################################

echo "backing up arch-vm2: "$(date)

TRY_SILENT=1 VOLGROP='fw16-vg' SNAPVOL='arch-vm2-backup-snap' /home/brandon/scripts/snap-lvm-delete

if ! VOLGROP='fw16-vg' ORIGVOL='arch-vm2' SNAPVOL='arch-vm2-backup-snap' SNAPSIZ='40G' /home/brandon/scripts/snap-lvm
then
    echo "unable to snap arch-vm2"
    exit 1
fi

if ! FSAOPTS='-Z8 -j8' VOLGROP='fw16-vg' SNAPVOL='arch-vm2-backup-snap' BACKDIR="${BACKDIR}" BACKNAM='arch-vm2' /home/brandon/scripts/snap-lvm-fsarchive
then
    echo "fsarchive exited with a fail status on arch-vm2"
    RES=1
fi

if ! VOLGROP='fw16-vg' SNAPVOL='arch-vm2-backup-snap' /home/brandon/scripts/snap-lvm-delete
then
    echo "unable to delete snap arch-vm2-backup-snap"
    exit 1
fi

sha256sum "${BACKDIR}/arch-vm2.fsa" > "${BACKDIR}/arch-vm2.fsa.sha256"


#####################################################
##
## Update backuptime
##
#####################################################

if [[ ${RES} -lt 1 ]]
then
    date +%s > "${BACKUP_ROOT_PATH}backuptime.txt"
else
    echo "error with backup; exiting without updating backuptime: "$(date)
    exit ${RES}
fi

#####################################################
##
## COPY backup to secondary path
##
#####################################################
# SECONDARYBACKDIR="${BACKUP_SECONDARY_ROOT_PATH}${TIMESTAMP}"

# echo "copying backup to secondary path"
# if mkdir ${SECONDARYBACKDIR} ; then
#     cp -fR ${BACKDIR}/* ${SECONDARYBACKDIR}
# else
#     echo "unable to copy backup to secondary path"
#     echo "failed to mkdir ${SECONDARYBACKDIR}"
#     RES=1
# fi

echo "finished: "$(date)

exit ${RES}
