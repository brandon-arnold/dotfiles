#!/bin/bash

#####################################################
##
## system-backup
## 
## Takes an image backup of various partitions.
##
#####################################################

BACKUP_ROOT_PATH="/mnt/backup/"
BACKUP_SECONDARY_ROOT_PATH="/mnt/nas-brandon/PcBackup/goatboxter-fw16/"
DAYS_BETWEEN_BACKUPS=6
MAX_BACKUP_AGE_DAYS=13

#####################################################
##
## Check if enough time has elapsed since last backup
##
#####################################################

echo "system-backup on "$(date)

SECONDS_BETWEEN_BACKUPS=$((DAYS_BETWEEN_BACKUPS * 24 * 60 * 60))

if ! /home/brandon/scripts/touch-date-check \
     -f "${BACKUP_ROOT_PATH}backuptime.txt" \
     -s "${SECONDS_BETWEEN_BACKUPS}"
then
    echo "Canceling, as not enough time has elapsed since last backup."
    exit 0
fi

#####################################################
##
## Delete backups older than MAX_BACKUP_AGE_DAYS
##
#####################################################

find "$BACKUP_ROOT_PATH" -maxdepth 1 -type d -name '20*' -mtime "+$MAX_BACKUP_AGE_DAYS" -exec rm -rf {} +

#####################################################
##
## Back up partition table(s) and LVM volume group definitions
##
#####################################################

TIMESTAMP="$(date +%Y%m%d-%Hh%M)"
BACKDIR="${BACKUP_ROOT_PATH}${TIMESTAMP}"
RES=0

mkdir ${BACKDIR}
sfdisk -d /dev/disk/by-id/nvme-eui.e8238fa6bf530001001b448b474d80be > "${BACKDIR}/sfdisk-partition-table__dev--disk--by-id--nvme-eui.e8238fa6bf530001001b448b474d80be.txt"
sfdisk -d /dev/disk/by-id/nvme-eui.e8238fa6bf530001001b448b4cb006fd > "${BACKDIR}/sfdisk-partition-table__dev--disk--by-id--nvme-eui.e8238fa6bf530001001b448b4cb006fd.txt"
cp /etc/lvm/backup/fw16-vg "${BACKDIR}/etc-lvm-backup-fw16-vg"
cp /etc/lvm/backup/fw16-2-vg "${BACKDIR}/etc-lvm-backup-fw16-2-vg"

#####################################################
##
## Back up /boot
##
#####################################################

echo "backing up /boot: "$(date)

if mountpoint -q /boot; then
    MOUNTED_BOOT=1
    if ! umount /boot
    then
        echo "unable to unmount /boot"
        exit 1
    fi
fi

if ! fsarchiver savefs -Z8 -j8 "${BACKDIR}/boot.fsa" /dev/disk/by-uuid/5F7D-3EB0
then
    echo "fsarchive exited with a fail status on /boot"
    RES=1
fi

if [ "$MOUNTED_BOOT" -eq "1" ]; then
    if ! mount /boot; then
        echo "unable to mount /boot"
        exit 1
    fi
fi

sha256sum "${BACKDIR}/boot.fsa" > "${BACKDIR}/boot.fsa.sha256"

#####################################################
##
## Back up /dev/fw16-vg/arch-root
##
#####################################################

echo "backing up arch-root: "$(date)

TRY_SILENT=1 VOLGROP='fw16-vg' SNAPVOL='arch-root-backup-snap' /home/brandon/scripts/snap-lvm-delete

if ! VOLGROP='fw16-vg' ORIGVOL='arch-root' SNAPVOL='arch-root-backup-snap' SNAPSIZ='40G' /home/brandon/scripts/snap-lvm
then
    echo "unable to snap arch-root"
    exit 1
fi

if ! FSAOPTS='-Z8 -j8' VOLGROP='fw16-vg' SNAPVOL='arch-root-backup-snap' BACKDIR="${BACKDIR}" BACKNAM='arch-root' /home/brandon/scripts/snap-lvm-fsarchive
then
    echo "fsarchive exited with a fail status on arch-root"
    RES=1
fi

if ! VOLGROP='fw16-vg' SNAPVOL='arch-root-backup-snap' /home/brandon/scripts/snap-lvm-delete
then
    echo "unable to delete snap arch-root-backup-snap"
    exit 1
fi

sha256sum "${BACKDIR}/arch-root.fsa" > "${BACKDIR}/arch-root.fsa.sha256"

#####################################################
##
## Back up /dev/fw16-vg/arch-home
##
#####################################################

echo "backing up arch-home: "$(date)

TRY_SILENT=1 VOLGROP='fw16-vg' SNAPVOL='arch-home-backup-snap' /home/brandon/scripts/snap-lvm-delete

if ! VOLGROP='fw16-vg' ORIGVOL='arch-home' SNAPVOL='arch-home-backup-snap' SNAPSIZ='40G' /home/brandon/scripts/snap-lvm
then
    echo "unable to snap arch-home"
    exit 1
fi

if ! FSAOPTS='-Z8 -j8' VOLGROP='fw16-vg' SNAPVOL='arch-home-backup-snap' BACKDIR="${BACKDIR}" BACKNAM='arch-home' /home/brandon/scripts/snap-lvm-fsarchive
then
    echo "fsarchive exited with a fail status on arch-home"
    RES=1
fi

if ! VOLGROP='fw16-vg' SNAPVOL='arch-home-backup-snap' /home/brandon/scripts/snap-lvm-delete
then
    echo "unable to delete snap arch-root-home-snap"
    exit 1
fi

sha256sum "${BACKDIR}/arch-home.fsa" > "${BACKDIR}/arch-home.fsa.sha256"

#####################################################
##
## Back up /dev/fw16-vg/arch-vm
##
#####################################################

echo "backing up arch-vm: "$(date)

TRY_SILENT=1 VOLGROP='fw16-vg' SNAPVOL='arch-vm-backup-snap' /home/brandon/scripts/snap-lvm-delete

if ! VOLGROP='fw16-vg' ORIGVOL='arch-vm' SNAPVOL='arch-vm-backup-snap' SNAPSIZ='40G' /home/brandon/scripts/snap-lvm
then
    echo "unable to snap arch-vm"
    exit 1
fi

if ! FSAOPTS='-Z8 -j8' VOLGROP='fw16-vg' SNAPVOL='arch-vm-backup-snap' BACKDIR="${BACKDIR}" BACKNAM='arch-vm' /home/brandon/scripts/snap-lvm-fsarchive
then
    echo "fsarchive exited with a fail status on arch-vm"
    RES=1
fi

if ! VOLGROP='fw16-vg' SNAPVOL='arch-vm-backup-snap' /home/brandon/scripts/snap-lvm-delete
then
    echo "unable to delete snap arch-vm-backup-snap"
    exit 1
fi

sha256sum "${BACKDIR}/arch-vm.fsa" > "${BACKDIR}/arch-vm.fsa.sha256"


#####################################################
##
## Updating backuptime
##
#####################################################

if [[ ${RES} -lt 1 ]]
then
    date +%s > "${BACKUP_ROOT_PATH}backuptime.txt"
else
    echo "error with backup; exiting without updating backuptime: "$(date)
    exit ${RES}
fi

#####################################################
##
## COPY backup to secondary path
##
#####################################################
# SECONDARYBACKDIR="${BACKUP_SECONDARY_ROOT_PATH}${TIMESTAMP}"

# echo "copying backup to secondary path"
# if mkdir ${SECONDARYBACKDIR} ; then
#     cp -fR ${BACKDIR}/* ${SECONDARYBACKDIR}
# else
#     echo "unable to copy backup to secondary path"
#     echo "failed to mkdir ${SECONDARYBACKDIR}"
#     RES=1
# fi

echo "finished: "$(date)

exit ${RES}
